{"version":3,"sources":["registerServiceWorker.js","constants.js","reducers.js","Card.js","CardList.js","SearchBox.js","Components/Scroll.js","App.js","actions.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","intialState","searchField","Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","fetch","response","json","users","setState","this","onSearchChange","filteredRobots","filter","toLowerCase","includes","length","color","Component","connect","dispatch","event","payload","target","value","logger","createLogger","store","createStore","action","Object","assign","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"8OAUMA,G,MAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MC/E1D,ICCDC,EAAc,CAChBC,YAAa,I,gCCYFC,G,KAXF,SAACC,GACV,OACI,yBAAKC,UAAU,kDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,6BACI,4BAAKJ,EAAMK,MACX,4BAAKL,EAAMM,WCQZC,EAfC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACd,OACI,6BAEGA,EAAOC,KAAI,SAACC,EAAKC,GAChB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAClBP,GAAII,EAAOG,GAAGP,GACdC,KAAMG,EAAOG,GAAGN,KAChBC,MAAOE,EAAOG,GAAGL,aCIdO,EAZE,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC5B,OACI,yBAAKd,UAAU,OACnB,2BACAA,UAAU,mCACVe,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCACI,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAQ,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEvB,EAAMwB,WCebC,E,kDACF,aAAe,IAAD,8BACV,gBACKlC,MAAQ,CACTiB,OAAO,IAHD,E,gEAOO,IAAD,OAChBkB,MAAM,8CACLzC,MAAK,SAAA0C,GACF,OAAOA,EAASC,UAEnB3C,MAAK,SAAA4C,GACF,EAAKC,SAAS,CAAEtB,OAAQqB,S,+BAMtB,IAAD,EACgCE,KAAK/B,MAAnCF,EADF,EACEA,YAAakC,EADf,EACeA,eACdC,EAAeF,KAAKxC,MAAMiB,OAAO0B,QAAO,SAAA1B,GAC1C,OAAOA,EAAOH,KAAK8B,cAAcC,SAAStC,EAAYqC,kBAE1D,OAAgC,IAA5BJ,KAAKxC,MAAMiB,OAAO6B,OACX,uCAGP,yBAAKpC,UAAU,MACd,wBAAImB,MAAO,CAACkB,MAAM,UAAWrC,UAAU,gBAAvC,eACA,wBAAImB,MAAO,CAACkB,MAAM,UAAlB,8HACA,kBAAC,EAAD,CAAWvB,aAAciB,IACzB,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUxB,OAAQyB,U,GAlCdM,aA2CHC,eAvDS,SAAAjD,GACpB,MAAO,CACHO,YAAaP,EAAMO,gBAGA,SAAC2C,GAExB,MAAO,CACPT,eAAgB,SAACU,GAAD,OAAWD,ECfU,CACrCzB,KAAM,sBACN2B,QDamDD,EAAME,OAAOC,YA+CrDL,CAA6Cf,GEnDtDqB,EAASC,yBACTC,EAAOC,aPPe,WAAmC,IAAlC1D,EAAiC,uDAA3BM,EAAaqD,EAAc,uDAAP,GACnD,OAAOA,EAAOlC,MACb,IDP8B,sBCQ9B,OAAOmC,OAAOC,OAAQ,GAAI7D,EAAO,CAACO,YAAYoD,EAAOP,UACrD,QAAS,OAAOpD,KOGkB8D,YAAgBC,IAAiBR,IAExES,IAASC,OACL,kBAAC,IAAD,CAAUR,MAAOA,GACb,kBAAC,EAAD,OAKNS,SAASC,eAAe,STDX,WACb,GAA6C,kBAAmB5E,UAAW,CAGzE,GADkB,IAAI6E,IAAIC,eAAwBpF,OAAOC,UAC3CoF,SAAWrF,OAAOC,SAASoF,OAIvC,OAGFrF,OAAOsF,iBAAiB,QAAQ,WAC9B,IAAMjF,EAAK,UAAM+E,eAAN,sBAEPtF,IAiDV,SAAiCO,GAE/B6C,MAAM7C,GACHI,MAAK,SAAA0C,GAGkB,MAApBA,EAASoC,SACuD,IAAhEpC,EAASqC,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CpF,UAAUC,cAAcoF,MAAMlF,MAAK,SAAAC,GACjCA,EAAakF,aAAanF,MAAK,WAC7BT,OAAOC,SAAS4F,eAKpBzF,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEA4E,CAAwBzF,GAIxBC,UAAUC,cAAcoF,MAAMlF,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OS1BxB0F,K","file":"static/js/main.6aab676d.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';","import { CHANGE_SEARCH_FIELD} from './constants.js'\r\nconst intialState = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=intialState, action={}) => {\r\n    switch(action.type) {\r\n     case CHANGE_SEARCH_FIELD:\r\n     return Object.assign ({}, state, {searchField:action.payload})\r\n     default: return state;\r\n    }\r\n}","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Card = (props) => {\r\n    return (\r\n        <div className='tc bg-purple dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${props.id}?200x200`}/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <h3>{props.email}</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList =({robots}) => {\r\n    return (\r\n        <div>\r\n       {\r\n           robots.map((user,i) => {\r\n            return <Card key={i} \r\n            id={robots[i].id} \r\n            name={robots[i].name} \r\n            email={robots[i].email}/>\r\n            })\r\n       }\r\n \r\n     </div>\r\n    )\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n    <input \r\n    className='pa3 ba b--green bg-lightest-blue'\r\n    type='search' \r\n    placeholder='Search Robots'\r\n    onChange={searchChange}\r\n    />\r\n    </div>\r\n    )\r\n}\r\nexport default SearchBox;   ","import React from 'react';\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style ={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux'\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Components/Scroll';\r\nimport { setSearchField } from './actions'\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchField\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>\r\n{\r\n    return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value))\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots:[],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> {\r\n            return response.json();\r\n        })\r\n        .then(users => {\r\n            this.setState({ robots: users})\r\n        });\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const {searchField, onSearchChange} =this.props;\r\n        const filteredRobots=this.state.robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(searchField.toLowerCase())\r\n        })\r\n        if (this.state.robots.length ===0) {\r\n            return <h1>Loading</h1>\r\n        } else {\r\n        return (\r\n            <div className='tc'>\r\n             <h1 style={{color:\"Orange\"}} className='f2 georgia b'>RoboFriends</h1>\r\n             <h4 style={{color:\"white\"}}> RoboFriends App is built on React and helps you find Name, E-Mail and Profile Picture of Funny Robots using RoboHash API.</h4>\r\n             <SearchBox searchChange={onSearchChange} />\r\n             <Scroll>\r\n              <CardList robots={filteredRobots} />\r\n             </Scroll>\r\n             </div>\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","export const setSearchField = (text) => ({\r\n    type: 'CHANGE_SEARCH_FIELD',\r\n    payload: text\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport { createStore, applyMiddleware} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots} from './reducers';\nimport App from './App';\nimport 'tachyons';\nconst logger = createLogger();\nconst store =createStore(searchRobots, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n\n\n\n, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}